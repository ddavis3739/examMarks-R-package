{
    "collab_server" : "",
    "contents" : "---\ntitle: \"examMarks\"\nauthor: \"Andrew Davis, Andriani Hadjiconstanti, and Zamfirescu Ana Maria\"\ndate: \"26-04-2017\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{examMarks}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n```{r message = FALSE}\nlibrary(examMarks)\n```\n\nThis package is designed to generate random answers to a given exam for a given \nnumber of students. It can then mark exam answers as well as generating visual \nrepresentaions of the exam marks and analyzing the mark distribution as well. \n\n## Generating random answers\n\n### generateStudentAnswersForExam()\n\nBy using generateStudentAnswersForExam(), one is able to create an answer sheet \nbased on the total number of questions in an exam and the amount of questions \nthat the student is asked. moduleID and studentID is only required if you are \nwriting to a file as they form the file name.\n\n```{r message = FALSE}\nhead(generateStudentAnswersForExam(totalNumberofQuestions = 100, \n                                     numberOfQuestionsToAnswer= 30, \n                                     writeToFile = F))\n```\n\nIf one wants to write the generated answer sheet to a file then the file will \nbe saved according to moduleID and studentID. For example this file would be \nsaved as 'BS281_answers_12.tsv'. \n\n```{r message = FALSE, eval = FALSE}\ngenerateStudentAnswersForExam(totalNumberofQuestions = 100, \n                              numberOfQuestionsToAnswer= 30, writeToFile = T, \n                              moduleID = 'BS281', studentID = '12')\n```\n\n### generateAllStudentsAnswersForExam()\n\nUsing the generateAllStudentsAnswersForExam() function one is able to generate \nanswer sheets for multiple students. This function uses the \ngenerateStudentAnswersForExam() function witnin it. Datasets are included in \nthis package and are listed as defualt values to demo how the functions runs. \nreadFromFiles must equal TRUE if one needs to use external files to run the \nfunction. \n\nIn this case only moduleID is required. The output is split into a list with the \nfirst part conatining a list of the students taking the module and the second \npart of the list conatining a list of all the student answers. \n\n```{r message = FALSE}\ntest = generateAllStudentsAnswersForExam('BS285', writeToFile = FALSE)\nhead(test[[1]])\nhead(data.frame(test[[2]][1]))\n```\n\nIf one wants to write the answers to files then a folder is created with all of\nthe student answers contained within. A file is also created that lists the \nstudents that took the exam.\n\n```{r message = FALSE, eval = FALSE}\ngenerateAllStudentsAnswersForExam('BS285', writeToFile = TRUE)\n```\n\n### createAnswerKey()\n\nA randomly generated answer key can also be created using the createAnswerKey()\nfunction. The number of questions and the answer options must be specified. \n\n```{r message = FALSE}\nhead(createAnswerKey(numberOfQuestions = 30, writeToFile = FALSE, \n                     ansOptions = letters[1:5]))\n```                           \n\nIf the answer key is being written to a file then it is saved according to \nmoduleID. For example this file be called 'correct_answers_BS281.dat'\n\n```{r message = FALSE}\ncreateAnswerKey(numberOfQuestions = 30, writeToFile = TRUE, moduleID = 'BS281',\n                ansOptions = letters[1:5])\n```     \n\n### Datasets provided \n\n#### exams\n\nA dataframe that indicates what modules each degree course takes, with Yes, No, \nor Optional being listed.\n\n```{r message = FALSE}\nhead(exams)\n``` \n\n#### keys \n\nA list containing 5 different exam keys of varying length. All keys have \npossible answers being from \"a\" to \"e\".\n\n#### students\n\nA dataframe with the ID and degree course for each student.\n\n```{r message = FALSE}\nhead(students)\n``` \n\n#### questions\n\nA dataframe with the total number of questions in an exam and the amount of \nquestions that need to be answered. \n\n```{r message = FALSE}\nhead(questions)\n``` \n\n## Marking Students\n\n### markStudentsForExam()\n\nUsing this function a dataframe can be created which contains the marks for each\nstudent for a given exam. The marks are based on the exam answers randomly \ngenerated from generateAllStudentsAnswersForExam().\n\n```{r message = FALSE}\nhead(markStudentsForExam(fileDir = './', \n                         ExamFilesDir = './BS281studentAnswerFiles', \n                         ModuleID = 'BS281'))\n``` \n\n\n### getDegree()\n\nThis function is designed to be used in the addDegree() function to add the degree to \neach student. A singular mark is converted to a degree based on the mark.\n\n```{r message = FALSE}\ngetDegree(61)\n```\n\n### addDegrees()\n\nThe purpose of this function is to add a degree for each student, amending the \ndataframe as an output.\n\n```{r message = FALSE, echo=FALSE}\nstudentID = 1:100; mark = sample(1:100, 100, replace = T)\ncourse = sample(c('Biological Sciences', 'Genetics'), 100, replace = T)\ntestMarks = data.frame(studentID, course, mark)\n``` \n```{r message = FALSE}\nhead(addDegrees(testMarks))\n``` \n\n### markStudents()\n\nOutputs a list of dataframes of student marks for each module or creates a \nfolder with files with the marks for each exam depending on if writeToFile is \nTRUE or FALSE.\n\n```{r message = FALSE}\nsummary(markStudents(fileDir = './'))\n``` \n\n## Data Analysis\n\n### examHist()\n\nA histogram is generated using a list conatining dataframes for each moduleID, with columns of studentID, degree course, and mark, and the moduleID being assesed.\n\n```{r message = FALSE, echo=FALSE}\nstudentID = 1:100; mark = sample(1:100, 100, replace = T)\ncourse = sample(c('Biological Sciences', 'Genetics'), 100, replace = T)\ntestMarks = data.frame(studentID, course, mark, sapply(mark, getDegree))\ntest = list(testMarks); names(test) = 'BS281'\n```\n```{r message = FALSE}\nexamHist(test, 'BS281')\n``` \n\n### moduleHist()\n\nA histogram is generated using a dataframe, with columns of studentID, degree \ncourse, and mark, and the degree subject being assesed.\n\n```{r message = FALSE}\nmoduleHist(testMarks, 'Biological Sciences')\n``` \n\n### testWithinModule()\n\nEither a t-test or a wilcoxin test is run to test for a difference in the \ndistribution of marks between degree courses for a module. A normality test is \nrun to determine which test will be run.\n\n```{r message = FALSE}\ntestWithinModule(test, 'BS281')\n``` \n\n### testBetweenCourse()\n\nEither a t-test or a wilcoxin test is run to test for a difference in the \ndistribution of marks between degree courses for overall marks. A normality test \nis run to determine which test will be run.\n\n```{r message = FALSE, echo=FALSE}\nstudentID = 1:100; mark = sample(1:100, 100, replace = T)\ncourse = sample(c('Biological Sciences', 'Genetics'), 100, replace = T)\ntestMarks = data.frame(studentID, course, mark, sapply(mark, getDegree))\n```\n```{r message = FALSE}\ntestBetweenCourse(testMarks)\n``` \n\n",
    "created" : 1493247539576.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "378819471",
    "id" : "22CBBA5B",
    "lastKnownWriteTime" : 1493248390,
    "last_content_update" : 1493248390261,
    "path" : "~/R/Learning/BS231/examMarks/vignettes/examMarks.Rmd",
    "project_path" : "vignettes/examMarks.Rmd",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}