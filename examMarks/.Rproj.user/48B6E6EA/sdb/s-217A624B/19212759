{
    "collab_server" : "",
    "contents" : "---\ntitle: \"examMarks Package\"\nauthor: \"Andrew Davis, Andriani Hadjiconstanti, and Zamfirescu Ana Maria\"\ndate: \"26/4/2017\"\noutput:\n  ioslides_presentation:\n    widescreen: true\n    smaller: true\n---\n\n## Package Overview\n\n```{r message = FALSE}\nlibrary(examMarks)\n```\n\n* This package is designed to mark student answers to based on given exam answer keys and to analysis the distributions of the marks based on different factors.\n* It is also capable of generating random student answers and randomly generated answer keys.\n\nThe package is split into 3 parts with helpful datasets included as well.\n\n1. Random Generation of Answers\n2. Marking student Answers\n3. Analysing the Distribution of the Marks\n\n## Datasets\n\n- **students** - dataframe with the ID of students and their respective degree course\n```{r message = FALSE}\nhead(students)\n```\n\n- **exams** - dataframe that defines which modules each degree course takes\n```{r message = FALSE}\nexams\n```\n\n## Datasets\n\n- **questions** -  dataframe that lists how many questions a student is asked in each exam and how many total questions each exam has\n```{r message = FALSE}\nhead(questions)\n```\n\n- **keys** - list with a sample answer key for each exam\n```{r message = FALSE}\nsummary(keys)\n```\n\n## Random Generation of Answers\n\n- To generate an answer sheet for a single student use **generateStudentAnswersForExam()**\n- students can answer either a, b, c, d, e, or not at all (N/A) for each question\n- if writeToFile == TRUE, then studentID and moduleID must be supplied to create the filename\n\n```{r message = FALSE}\nhead(generateStudentAnswersForExam(totalNumberofQuestions = 100, \n                                   numberOfQuestionsToAnswer= 30, \n                                   writeToFile = F))\n```\n\n## Random Generation of Answers\n\n* To generate all student answer for a given module use **generateAllStudentAnswersForExam()**\n* The default values are set to use the provided datasets\n    + these can be manipulated or new datasets or files can be used for individual use\n    + use readFromFiles to determine whether or not the arguments should be read as Rdata or files\n    + use degreeNames if the degree courses are not called 'Biological Sciences' and 'Genetics'\n* if writeToFile == FALSE\n    + data is output as a list with 2 elements, the students that took the exam and a list of the answers for each student\n* if writeToFile == TRUE\n    + a file listing the students who took the exam is created\n    + a folder is created with the student answer files within it\n* if a module is optional for a given degree, course then students are selected at random to take it, with more students taking it being more likely\n\n## Random Generation of Answers\n\n* The student list as the first list element\n```{r message = FALSE}\ntest = generateAllStudentsAnswersForExam('BS281', writeToFile = FALSE)\nhead(test[[1]])\n```\n* The next element is the list of dataframes \n    + each student's answers is its own element of the list\n* each generates the same output as generateStudentAnswersForExam() for each student's answers\n\n```{r message = FALSE, eval=FALSE}\ntest = generateAllStudentsAnswersForExam('BS281', writeToFile = FALSE)\ntest[[1]][2]\n```\n\n## Random Generation of Answers\n\n* Can also use **createAnswerKey()** to randomly generate an exam key\n\n```{r message = FALSE}\nhead(createAnswerKey(numberOfQuestions = 30, writeToFile = FALSE,\n                     ansOptions = letters[1:5]))\n```\n\n* if writing to a file moduleID is required in order to name the answer key\n\n```{r message = FALSE}\ncreateAnswerKey(numberOfQuestions = 30, writeToFile = TRUE, moduleID = 'BS281',\n                ansOptions = letters[1:5])\n```\n\n## Marking Students\n\n\n* To mark all the students for one exam **markStudentsForExam()**\n* This function relies on all relevant files to be in the same directory\n    + these include the correct answer files, \"number_of_questions.tsv\" as well as the folders containing the student answer files for each exam\n* The output is in the form of a dataframe with studentID, degree course, and mark as columns\n\n```{r message = FALSE}\nhead(markStudentsForExam(fileDir = './', ExamFilesDir = './BS281studentAnswerFiles',\n                    ModuleID = 'BS281'))\n```\n\n## Marking Students\n\n\n* as part of the function that will mark all of the exams degree marks need to be added as well\n* the **getDegree()** function is used for that\n* In this function a mark is entered and it is converted to a degree\n\n```{r message = FALSE, echo=FALSE}\nmarks = markStudentsForExam(fileDir = './', ExamFilesDir = './BS281studentAnswerFiles',\n                    ModuleID = 'BS281')\n```\n```{r message = FALSE}\nhead(addDegrees(marks))\n```\n\n## Marking Students\n\n* getDegree() is then used in the **addDegrees()** function to add degrees to each student\n* The function takes a dataframe with columns of studentID, degree course, and mark as input\n* The same dataframe is outputted with an added column including degree\n\n```{r message = FALSE}\ngetDegree(65)\n```\n\n## Marking Students\n\n\n* To mark the student answers for all the exams use the **markStudents()** function\n* This function takes the directory where everything is located as input\n    + This function uses markStudentsForExam(), so all relevant files must be in the same directory\n* There is also the option to have the output show on the console or be written into a folder using the writeToFile parameter\n* If writeToFile = FALSE, a list of dataframes is created with each one representing the marked answers for a given exam\n\n```{r message = FALSE}\nsummary(markStudents(fileDir = './'))\n```\n\n* If writeToFile = TRUE, a folder is created with a file for each exams marks\n\n## Marking Students\n\n* Using the function **examHist()**, a histogram can be generated using a list containing dataframes for each moduleID  and the moduleID being assessed\n* each list dataframe should have columns of studentID, degree course, and mark\n\n```{r message = FALSE, echo=FALSE}\nstudentID = 1:100\nmark = sample(1:100, 100, replace = T)\ncourse = sample(c('Biological Sciences', 'Genetics'), 100, replace = T)\ntestMarks = data.frame(studentID, course, mark)\ntestData = list(testMarks)\nnames(testData) = 'BS281'\n```\n```{r message = FALSE}\nexamHist(testData, 'BS281')\n```\n\n## Data Analysis\n\n* Using the function **moduleHist()**, a histogram can be generated using a dataframe and the degree subject being assessed\n* The dataframe should have columns of studentID, degree course, and mark\n\n```{r message = FALSE}\nmoduleHist(testMarks, 'Biological Sciences')\n```\n\n## Data Analysis\n\n* To analyse the difference in marks between the two degree course within a given module use **testWithinModule()**\n* Either a t-test or a wilcoxon test is run\n    + A normality test is run to determine which test will be run\n\n```{r message = FALSE}\ntestWithinModule(testData, 'BS281')\n```\n\n## Data Analysis\n\n* To analyse the difference in marks between the two degree course for the overall marks use **testBetweenCourse()**\n* Either a t-test or a wilcoxon test is run\n    + A normality test is run to determine which test will be run\n\n```{r message = FALSE, echo=FALSE}\nstudentID = 1:100; mark = sample(1:100, 100, replace = T)\ncourse = sample(c('Biological Sciences', 'Genetics'), 100, replace = T)\ntestMarks = data.frame(studentID, course, mark)\n```\n```{r message = FALSE}\ntestBetweenCourse(testMarks)\n```\n",
    "created" : 1493240488450.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3198505419",
    "id" : "19212759",
    "lastKnownWriteTime" : 1493245951,
    "last_content_update" : 1493245951988,
    "path" : "~/R/Learning/BS231/Team3Presentation.Rmd",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}