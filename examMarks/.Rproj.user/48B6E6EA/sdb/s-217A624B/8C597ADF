{
    "collab_server" : "",
    "contents" : "\n#' @title Marks students for exam\n#'\n#' @description Has as output .tsv files with the marks for all the students based on the\n#' exam answers randomly generated in point a.\n#'\n#' @param fileDir directory were the correct answers are stored\n#'\n#' @param ExamFilesDir directory were the students' answers are stored\n#'\n#' @param ModuleID specifies what module is being assesed\n#'\n#' @return a table with students' ID, mark, and degree\n#'\n#' @author Ana-Maria Zamfirescu \\email{azamfi@essex.ac.uk}\n\n\nmarkStudentsForExam = function(fileDir, ExamFilesDir, ModuleID) {\n\n  # read in correct answer file based on module\n  setwd(fileDir)\n  CorrectAnswersFile = paste0(\"correct_answers_\", ModuleID, \".dat\")\n  CorrectAnswersFile\n  CorrectAnswers = read.table(CorrectAnswersFile, header = T)\n\n  # read in number of questions asked\n  NumberOfQuestions = read.table(\"number_of_questions.tsv\", header = T)\n  NumberOfAnswers = NumberOfQuestions[match(ModuleID,NumberOfQuestions[,1]),2]\n\n  # switch to working with student answers and grab all\n  setwd(ExamFilesDir)\n  ExamFiles=list.files(full.names = F)\n  ExamFiles=ExamFiles[grep(ModuleID,ExamFiles)]\n\n  # create empty vector for for loops\n  Mark<-vector(length = 0, mode = \"numeric\")\n\n  # extract all student IDs\n  StudentID<-sub(\".*_\",\"\",ExamFiles)\n  StudentID<-sub(\".tsv\",\"\",StudentID)\n\n  # for each loop read in student answer files\n  for(i in 1:length(ExamFiles))\n  {\n    StudentAnswers=read.table(ExamFiles[i], header = T)\n    NoCorrectAnswers <- 0\n\n    # for each student a corresponding answer file\n    for(j in 1:length(StudentAnswers[,1])){\n\n        if(StudentAnswers[j,2]%in%CorrectAnswers[StudentAnswers[j,1],1]){\n          NoCorrectAnswers<-NoCorrectAnswers + 1\n        }\n    }\n    # create mark out of 100 based on number of questions and compile vector\n    NoPoints<-round(100*NoCorrectAnswers/NumberOfAnswers)\n    # use Mark[i]\n    Mark[i] <- NoPoints\n  }\n\n  # get course\n  setwd('../')\n  course = read.table(paste0('studentList_', ModuleID, '.tsv'),\n                      header = TRUE)[2]\n\n  # combine ID and mark and output\n  Grades <- data.frame(StudentID, course, Mark)\n  names(Grades) = c('StudentID', 'Course', 'Mark')\n  return(Grades)\n}\n\n\n#' @title Get students degree\n#'\n#' @description argument used for the sapply() function\n#'\n#' @param mark the value which shows a student's score achieved in the exam\n#'\n#' @note is a helping function for markStudents()\n#'\n#' @author Ana-Maria Zamfirescu \\email{azamfi@essex.ac.uk}\n\n\n# create a function which will help the main function\ngetDegree <- function(mark){\n  if(mark>=70) return(\"1st\")\n  else if(mark>=60) return(\"2:1\")\n  else if(mark>=50) return(\"2:2\")\n  else if(mark>=40) return(\"3rd\")\n  else return(\"failed\")\n}\n\n#' @title Achieved degree\n#'\n#' @description adds a degree to each students' mark and outputs a dataframe\n#'\n#' @param TableOfMarks table which contains the marks and the degrees for each\n#' student\n#'\n#' @return a table with the appropriate degrees\n#'\n#' @author Ana-Maria Zamfirescu \\email{azamfi@essex.ac.uk}\n\n\n# create the main function for the degree assignment\naddDegrees = function(TableOfMarks)\n{\n  degrees <- sapply(TableOfMarks[,3], getDegree)\n  TableOfMarks$Degree <- degrees\n  return (TableOfMarks)\n}\n\n\n#' @title Students marks and degrees\n#'\n#' @description Outputs a table with student ID, mark, and degree or creates a\n#' folder with files with the marks for the students that took each respective\n#' exam.\n#'\n#' @param fileDir  directory were the correct answers are stored\n#'\n#' @param writeToFile arguement that specifies whether output is shown in the\n#' console or if a folder is a created\n#'\n#' @return table student ID, mark, and degree for each exam\n#'\n#' @author Ana-Maria Zamfirescu \\email{azamfi@essex.ac.uk}\n\n# create function which creates the table with student ID, mark,and degree\n# for testing, the files directory must mentioned\n\nmarkStudents = function(fileDir, writeToFile = FALSE)\n{\n  # changing the working directory to where the correct answers are located\n  setwd(fileDir)\n  questions = read.table(\"number_of_questions.tsv\", header = T)\n  Modules = questions[,1]\n\n# putting the conditions for the if function\n# if true create a folder with files for each module\n\n  if(writeToFile == TRUE)\n    for(i in 1:length(Modules))\n    {\n      StudentMarks <- markStudentsForExam(fileDir,\n                                          paste0(Modules[i], 'studentAnswerFiles'),\n                                          Modules[i])\n      StudentMarks <- addDegrees(StudentMarks)\n      filename = paste0(Modules[i],\"_marks.tsv\")\n      # changing working directory when creating the folder\n      # output dataframes for each exam\n      setwd(\"../\")\n      if(!dir.exists(\"student_marks\")) dir.create(\"student_marks\")\n      setwd(\"student_marks\")\n      write.table(StudentMarks, file = filename,\n                  row.names = F, quote = F, col.names = T)\n    }\n  # otherwise show output in console\n  else {\n    marks = list()\n    # constructing a list with the marks for each exam\n    # output in console\n    for(i in 1:length(Modules)) {\n      StudentMarks <- markStudentsForExam(fileDir,\n                                          paste0(Modules[i], 'studentAnswerFiles'),\n                                          Modules[i])\n      StudentMarks <- addDegrees(StudentMarks)\n      marks[[i]] = StudentMarks\n    }\n    names(marks) = Modules\n    return(marks)\n  }\n}\n\n\n",
    "created" : 1493246984662.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1514720426",
    "id" : "8C597ADF",
    "lastKnownWriteTime" : 1493235317,
    "last_content_update" : 1493235317,
    "path" : "~/R/Learning/BS231/examMarks/R/markExams.R",
    "project_path" : "R/markExams.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}